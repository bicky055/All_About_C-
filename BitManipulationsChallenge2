#include<bits/stdc++.h>
using namespace std;
//write a program to find a unique number in a array where all numbers except  one,are present twice
//importent question for interviwe

/*int unique(int arr[], int n)
{
    int xosum=0;
    for(int i=0;i<n;i++)
    {
        xosum=xosum^arr[i];
    }
    return xosum;
}
int main()
{
    int arr[]={2,4,6,3,4,6,2};
    cout<<unique(arr,7)<<endl;
}*/

//write a program to find 2 unique number in a array where all numbers except  two,are present twice
//also importent question for interviwe

/*int setBit(int n,int pos)
{
    return ((n & (1<<pos))!=0);
}
void unique(int arr[],int n)
{
    int xorsum1=0;
    for(int i=0;i<n;i++)
    {
        xorsum1=xorsum1^arr[i];
    }
    int tempxor=xorsum1;
    int setbit=0;
    int pos=0;
    while(setbit!=1)
    {
        setbit=xorsum1 & 1;
        pos++;
        xorsum1=xorsum1 >>1;
    }
    int newxor=0;
    
    for(int i=0;i<n;i++)
    {
        if(setBit(arr[i],pos-1))
        {
           newxor= newxor^arr[i];
        }
    }
    cout<<newxor<<endl;
    cout<<(tempxor^newxor)<<endl;
}

int main()
{
    int arr[]={1,2,3,4,5,1,2,3};
    unique(arr,8);
    return 0;
}*/


//write a program to find a unique number in a array where all number except one ,are present thrice


bool getBit(int n, int pos) 
{
    return ((n & (1 << pos)) != 0);
}

int setBit( int n, int pos) 
{
    return (n | (1 << pos));
}

int unique(int arr[], int n)
{
   int result = 0;
   for (int i = 0; i < 64; i++) {
    int sum = 0;
   for (int j = 0; j < n; j++)
   {
      if (getBit(arr[j], i)) 
      {
       sum++;
      }
    }
        if (sum % 3 != 0)
        {
          result = setBit(result, i);
        }
    }
      return result;
      }
int main() {
int arr[] = {1, 2, 3, 4, 1, 2, 3, 1, 2, 3};
cout << unique(arr, 10) << endl;
return 0;
}



